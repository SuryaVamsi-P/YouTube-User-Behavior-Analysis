###   DATA VISUALIZATION(Static plots)   ###

# BAR PLOT for most common tags(Cleaning and splitting tags)
def process_tags(tags):
    # Replacing quotation marks and splitting the tags
    tags = tags.replace('"', '').split('|')
    return [tag.strip().lower() for tag in tags if tag.strip().lower() != '[none]']

# Applying the function and expanding all tags
all_tags = mydata['tags'].apply(process_tags).explode()

# Counting the occurrences of each tag
tag_counts = Counter(all_tags)

# Choosing the top 20 most common tags to plot
most_common_tags = tag_counts.most_common(20)
tags, counts = zip(*most_common_tags)
plt.figure(figsize=(12, 8))
plt.bar(tags, counts, color='blue')
plt.xlabel('Tags', fontname='serif', color='darkred', fontsize='large')
plt.ylabel('Frequency', fontname='serif', color='darkred', fontsize='large')
plt.title('Top 20 Most Common YouTube Tags', fontname='serif', color='blue', fontsize='large')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

#%%

#%%

###   LINE PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
odata['publish_date'] = pd.to_datetime(odata['publish_date'])
monthly_data = odata.groupby(odata['publish_date'].dt.to_period('M')).agg({
    'views': 'sum',
    'likes': 'sum',
    'dislikes': 'sum',
    'comment_count': 'sum'}).reset_index()

monthly_data['publish_date'] = monthly_data['publish_date'].dt.to_timestamp()
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(14, 10))
fig.suptitle('Monthly Trends of YouTube Video Metrics', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'}, y=0.95)

axes[0, 0].plot(monthly_data['publish_date'], monthly_data['views'], label='Views', color='blue')
axes[0, 0].set_title('Monthly Views', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'})
axes[0, 0].set_xlabel('Month', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[0, 0].set_ylabel('Views', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[0, 0].grid(True)

axes[0, 1].plot(monthly_data['publish_date'], monthly_data['likes'], label='Likes', color='green')
axes[0, 1].set_title('Monthly Likes', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'})
axes[0, 1].set_xlabel('Month', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[0, 1].set_ylabel('Likes', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[0, 1].grid(True)

axes[1, 0].plot(monthly_data['publish_date'], monthly_data['dislikes'], label='Dislikes', color='red')
axes[1, 0].set_title('Monthly Dislikes', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'})
axes[1, 0].set_xlabel('Month', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[1, 0].set_ylabel('Dislikes', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[1, 0].grid(True)

axes[1, 1].plot(monthly_data['publish_date'], monthly_data['comment_count'], label='Comment Count', color='purple')
axes[1, 1].set_title('Monthly Comment Count', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'})
axes[1, 1].set_xlabel('Month', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[1, 1].set_ylabel('Comment Count', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
axes[1, 1].grid(True)

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

#%%

#%%

###   BAR PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
plot_data = odata.head(10)
fig, ax = plt.subplots(figsize=(10, 6))
ax.bar(plot_data['title'], plot_data['likes'], label='Likes')
ax.bar(plot_data['title'], plot_data['dislikes'], bottom=plot_data['likes'], label='Dislikes')
ax.bar(plot_data['title'], plot_data['comment_count'], bottom=plot_data['likes'] + plot_data['dislikes'], label='Comment Count')

ax.set_ylabel('Counts', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
ax.set_title('Stacked Metrics per Video', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'})
ax.legend()

plt.xticks(rotation=90)
plt.tight_layout()

# Grouped bar chart
fig, ax = plt.subplots(figsize=(10, 6))
width = 0.25
r1 = range(len(plot_data['title']))
r2 = [x + width for x in r1]
r3 = [x + width for x in r2]

ax.bar(r1, plot_data['likes'], color='b', width=width, edgecolor='grey', label='Likes')
ax.bar(r2, plot_data['dislikes'], color='r', width=width, edgecolor='grey', label='Dislikes')
ax.bar(r3, plot_data['comment_count'], color='g', width=width, edgecolor='grey', label='Comment Count')

ax.set_xlabel('Video Title', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
ax.set_ylabel('Counts', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
ax.set_title('Grouped Metrics per Video', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'})
ax.set_xticks([r + width/2 for r in r1])
ax.set_xticklabels(plot_data['title'], fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
ax.legend()

plt.xticks(rotation=90)
plt.tight_layout()

plt.show()

#%%

#%%

###   COUNTOUR PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
data = odata[['views', 'likes', 'dislikes']].dropna()
x = np.linspace(data['views'].min(), data['views'].max(), 100)
y = np.linspace(data['likes'].min(), data['likes'].max(), 100)
X, Y = np.meshgrid(x, y)
Z = griddata((data['views'], data['likes']), data['dislikes'], (X, Y), method='cubic')

# Create contour plot
plt.figure(figsize=(10, 7))
cp = plt.contourf(X, Y, Z, 20, cmap='viridis')
plt.colorbar(cp)
plt.title('Contour Plot of Dislikes against Views and Likes', fontdict={'fontname': 'serif', 'color': 'blue', 'size': 'large'})
plt.xlabel('Views', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
plt.ylabel('Likes', fontdict={'fontname': 'serif', 'color': 'darkred', 'size': 'large'})
plt.grid(True)
plt.show()

#%%

#%%

### PIE CHARTS   ###

# Chart - 1
odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
feature_to_plot = 'part_of_day'
category_counts = odata[feature_to_plot].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(category_counts, labels=category_counts.index, autopct='%1.1f%%', startangle=90)
plt.title(f'Distribution of Videos by {feature_to_plot}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
plt.axis('equal')
plt.show()

# Chart - 2
feature_toplot = 'category_id'
category_count = odata[feature_toplot].value_counts().head(10)
plt.figure(figsize=(8, 8))
plt.pie(category_count, labels=category_count.index, autopct='%1.1f%%', startangle=90)
plt.title('Top 10 Video Categories', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
plt.axis('equal')
plt.show()

# Chart - 3
featuretoplot = 'published_day_of_week'
category_counts = odata[featuretoplot].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(category_counts, labels=category_counts.index, autopct='%1.1f%%', startangle=90)
plt.title(f'Distribution of Videos by {featuretoplot}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
plt.axis('equal')
plt.show()

#%%

#%%

###   HIST,BOX & KDE PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')

# Histogram Plot (4 plots)

plt.figure(figsize=(15, 10))
for i, column in enumerate(numeric_columns, 1):
    plt.subplot(2, 2, i)
    sns.histplot(odata[column], kde=True, element='step')
    plt.title(f'Distribution of {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Frequency', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.tight_layout()
plt.show()

# Box plot (4 plots)
plt.figure(figsize=(15, 10))
for i, column in enumerate(numeric_columns, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(y=odata[column])
    plt.title(f'Boxplot of {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Values', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.tight_layout()
plt.show()

# KDE Plot (4 plots)
plt.figure(figsize=(15, 10))
for i, column in enumerate(numeric_columns, 1):
    plt.subplot(2, 2, i)
    sns.kdeplot(odata[column], fill=True)
    plt.title(f'Kernel Density Estimation of {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Density', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.tight_layout()
plt.show()

#%%

#%%

###   MULTIVARIATE BOX / BOXEN PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
plt.figure(figsize=(15, 10))
colors = sns.color_palette("husl", len(numeric_columns))
for i, column in enumerate(numeric_columns, 1):
    plt.subplot(2, 2, i)
    sns.boxenplot(x=odata[column], color=colors[i-1])
    plt.title(f'Boxen plot for {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Values', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.tight_layout()
plt.show()

#%%

#%%

###   COUNT PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
categcolumns = odata.select_dtypes(include=['object', 'category']).columns
categcolumns = [col for col in categcolumns if odata[col].nunique() < 20]
plt.figure(figsize=(15, 5 * len(categcolumns)))
palette = sns.color_palette("husl", len(categcolumns))
for i, column in enumerate(categcolumns, 1):
    plt.subplot(len(categcolumns), 1, i)
    sns.countplot(x=odata[column], order=odata[column].value_counts().index, palette=[palette[i-1]])
    plt.title(f'Count Plot for {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Count', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#%%

#%%

###   Q-Q PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
plt.figure(figsize=(10, 5 * len(numeric_columns)))
for i, column in enumerate(numeric_columns, 1):
    plt.subplot(len(numeric_columns), 1, i)
    stats.probplot(odata[column], dist="norm", plot=plt)
    plt.title(f'Q-Q Plot for {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel('Theoretical Quantiles', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Ordered Values', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.tight_layout()
plt.show()

#%%

#%%

###   REGRESSION PLOT   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
feature_combinations = combinations(numeric_columns, 2)
for combo in feature_combinations:
    sns.regplot(x=combo[0], y=combo[1], data=odata)
    plt.xlabel(combo[0], fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel(combo[1], fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.title(f'Regression Plot of {combo[0]} vs {combo[1]}',fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.show()

#%%

#%%

###   BAR GRAPHS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
categorical_columns = [col for col in odata.columns if odata[col].nunique() < 20]
num_plots = len(categorical_columns)
cols = 2
rows = num_plots // cols + (num_plots % cols > 0)
plt.figure(figsize=(20, 5 * rows))
palette = sns.color_palette("hsv", len(categorical_columns))
for i, column in enumerate(categorical_columns, 1):
    plt.subplot(rows, cols, i)
    sns.countplot(x=odata[column], order=odata[column].value_counts().index, color=palette[i-1])
    plt.title(f'Bar Graph for {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Count', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#%%

#%%

###   AREA PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
numeric_columns = odata.select_dtypes(include=['float64', 'int64']).columns.dropna()
for column in numeric_columns:
    plt.figure(figsize=(10, 6))
    odata[column].plot(kind='area', color='skyblue', alpha=0.5)
    plt.title(f'Area Plot of {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel('Index', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.grid(True)
    plt.show()

#%%

#%%

###   VIOLIN PLOTS   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
numeric_columns = odata.select_dtypes(include=['float64', 'int64']).columns.dropna()
sns.set(style="whitegrid")
fig, axes = plt.subplots(len(numeric_columns), 1, figsize=(10, 5 * len(numeric_columns)))
if len(numeric_columns) == 1:
    axes = [axes]
for ax, column in zip(axes, numeric_columns):
    sns.violinplot(data=odata, x=column, ax=ax, inner='quartile', palette='husl')
    ax.set_title(f'Violin Plot for {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    ax.set_xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    ax.set_ylabel('Density', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#%%

#%%

###   hexbin plots   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
numeric_columns = odata.select_dtypes(include=['float64', 'int64']).columns.dropna()
for (column1, column2) in combinations(numeric_columns, 2):
    plt.figure(figsize=(10, 6))
    plt.hexbin(odata[column1], odata[column2], gridsize=30, cmap='Blues', bins='log')
    plt.colorbar(label='log10(N)')
    plt.title(f'Hexbin Plot of {column1} vs {column2}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel(column1, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel(column2, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.grid(True)
    plt.show()

#%%

#%%

###   STRIP PLOT   ###

odata = pd.read_csv('/Users/surya/Documents/Class files/Data visualization/FTP/FTP(Surya)/finaldata.csv')
numeric_columns = odata.select_dtypes(include=['float64', 'int64']).columns.dropna()
for column in numeric_columns:
    plt.figure(figsize=(10, 6))
    sns.stripplot(x=column, y=column, data=odata, jitter=0.25, palette='Set2', size=5)
    plt.title(f'Strip Plot of {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.xlabel('Index', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.ylabel('Value', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.grid(True)
    plt.show()
