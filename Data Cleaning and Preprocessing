###   DATA PREPROCESSING & DATA CLEANING   ###

print("\nData Preprocessing & Cleaning\n\n")

missing_values = numeric_columns.isnull().sum()
print("\nCount of missing values for each feature :-\n")
print(missing_values)

# dropping NaN/NULL values
mydata = mydata.dropna()

# Dropping 'video_id' and 'index' columns
mydata = mydata.drop('index', axis=1,inplace=False)
mydata = mydata.drop('video_id', axis=1,inplace=False)
mydata = mydata.drop('comments_disabled', axis=1,inplace=False)
mydata = mydata.drop('ratings_disabled', axis=1,inplace=False)
mydata = mydata.drop('video_error_or_removed', axis=1,inplace=False)


# Converting format of 'trending_date' column
mydata['trending_date'] = pd.to_datetime(mydata['trending_date'], format='%y.%d.%m').dt.strftime('%m-%d-%Y')

# Converting format of 'publish_date' column
mydata['publish_date'] = pd.to_datetime(mydata['publish_date'], format='%d/%m/%Y').dt.strftime('%m-%d-%Y')

# Modifying the 'time_frame' column to bring out WEEKDAYS and naming it as 'part_of_day'
def categorize_time_of_day(time_range):
    start_time = pd.to_datetime(time_range.split(' to ')[0], format='%H:%M').time()
    if start_time.hour < 6:
        return 'Night'
    elif start_time.hour < 12:
        return 'Morning'
    elif start_time.hour < 18:
        return 'Afternoon'
    else:
        return 'Evening'

mydata['part_of_day'] = mydata['time_frame'].apply(categorize_time_of_day)


# Eliminating Structural errors like Misspellings,Improper capitalization,Naming convention errors,etc..,

def clean_text(text):
    # Fixing common misspellings,capitalization and removing extra spaces
    text = text.lower()
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r"[^\w\s]", '', text)
    text = text.encode('ascii', 'ignore').decode('ascii')
    text = re.sub(r'http\S+', '', text)
    text = re.sub(r'www\S+', '', text)
    text = re.sub(r'<.*?>', '', text)
    text = re.sub(r'#\S+', '', text)
    return text.strip()


    # Applying the cleaning function to text columns
textcols = ['title', 'channel_title', 'tags']
for col in textcols:
    mydata[col] = mydata[col].apply(clean_text)
print("\nDataset after dropping useless columns :-\n")
print(mydata.head(10))

#%%

#%%

# Outliers Detection (using the IQR method) & Data Transformation(Box-Cox Transform)

print("\nOutlier Detection\n")
print("\nBox plot before Outlier Removal\n")

numcols = ['views', 'likes', 'dislikes', 'comment_count']
plt.figure(figsize=(12, 8))
for index, column in enumerate(numcols):
    plt.subplot(2, 2, index + 1)
    sns.boxplot(y=mydata[column])
    plt.title(f'Box Plot (before Outliers) of {column}', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.ylabel('Values', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.tight_layout()
plt.show()

print("\nOops,the data is Non-Gaussian Distributed!!\n")
print("So,I am going to Transform data into Gaussian Distribution using Box-Cox Transformation\n\n")

# Applying Box-Cox transformation

myviewsdata = mydata[mydata['views'] > 0]
viewstrans, fitted_lambda1 = boxcox(myviewsdata['views'])
mydata.loc[myviewsdata.index, 'transformed_views'] = viewstrans
plt.figure(figsize=(10, 6))
plt.hist(viewstrans, bins=50, color='green', edgecolor='black')
plt.title('Histogram of Transformed YouTube Video Views', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
plt.xlabel('Transformed Views', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.ylabel('Frequency', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.grid(True)
plt.show()
print(f"Fitted Lambda for Box-Cox Transformation[Views]: {fitted_lambda1}")


mylikesdata = mydata[mydata['likes'] > 0]
likestrans, fitted_lambda2 = boxcox(mylikesdata['likes'])
mydata.loc[mylikesdata.index, 'transformed_likes'] = likestrans
plt.figure(figsize=(10, 6))
plt.hist(likestrans, bins=50, color='green', edgecolor='black')
plt.title('Histogram of Transformed YouTube Video Likes', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
plt.xlabel('Transformed Likes', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.ylabel('Frequency', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.grid(True)
plt.show()
print(f"Fitted Lambda for Box-Cox Transformation[Likes]: {fitted_lambda2}")


mydislikesdata = mydata[mydata['dislikes'] > 0]
dislikestrans, fitted_lambda3 = boxcox(mydislikesdata['dislikes'])
mydata.loc[mydislikesdata.index, 'transformed_dislikes'] = dislikestrans
plt.figure(figsize=(10, 6))
plt.hist(dislikestrans, bins=50, color='green', edgecolor='black')
plt.title('Histogram of Transformed YouTube Video Dislikes', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
plt.xlabel('Transformed Dislikes', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.ylabel('Frequency', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.grid(True)
plt.show()
print(f"Fitted Lambda for Box-Cox Transformation[Dislikes]: {fitted_lambda3}")


mycommdata = mydata[mydata['comment_count'] > 0]
commtrans, fitted_lambda4 = boxcox(mycommdata['comment_count'])
mydata.loc[mycommdata.index, 'transformed_comment_count'] = commtrans
plt.figure(figsize=(10, 6))
plt.hist(commtrans, bins=50, color='green', edgecolor='black')
plt.title('Histogram of Transformed YouTube Video Comment_count', fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
plt.xlabel('Transformed Comment_count', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.ylabel('Frequency', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.grid(True)
plt.show()
print(f"Fitted Lambda for Box-Cox Transformation[Comment_count]: {fitted_lambda4}")

#%%

#%%

# Outlier Removal and END OF DATA CLEANING

print("\nOutlier Removal Begins...\n")

print("\nShape od data before Outlier Removal :-",mydata.shape)
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    filtered_df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
    return filtered_df

for column in ['views', 'likes', 'dislikes', 'comment_count']:
    mydata = remove_outliers(mydata, column)

print("\nShape of data after removing outliers :-", mydata.shape)


print("\nBox plot after Outliers removal\n")

plt.figure(figsize=(12, 8))
for index, column in enumerate(numcols):
    plt.subplot(2, 2, index + 1)
    sns.boxplot(y=mydata[column])
    plt.title(f'Box Plot (After Outliers) of {column}',fontdict={'fontname': 'serif', 'color': 'blue', 'fontsize': 'large'})
    plt.ylabel('Values', fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
    plt.xlabel(column, fontdict={'fontname': 'serif', 'color': 'darkred', 'fontsize': 'large'})
plt.tight_layout()
plt.show()

mydata = mydata.drop('transformed_views', axis=1,inplace=False)
mydata = mydata.drop('transformed_likes', axis=1,inplace=False)
mydata = mydata.drop('transformed_dislikes', axis=1,inplace=False)
mydata = mydata.drop('transformed_comment_count', axis=1,inplace=False)
mydata = mydata.drop('time_frame', axis=1,inplace=False)
print("\nFinally,This 'youtube.csv' dataset is cleaned!!\n")
'''mydata.to_csv('finaldata.csv', index=False)'''
print("\nThe cleaned dataset is saved as 'finaldata.csv'.\n\n")
